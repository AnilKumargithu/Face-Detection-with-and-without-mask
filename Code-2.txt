from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
import cv2
import os
import imutils
from distutils.version import StrictVersion
from object_detection.utils import ops as utils_ops

prototxtPath=os.path.sep.join([r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector','deploy.prototxt'])
weightsPath=os.path.sep.join([r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector','res10_300x300_ssd_iter_140000.caffemodel'])

prototxtPath

weightsPath

net=cv2.dnn.readNet(prototxtPath,weightsPath)

model=load_model(r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector\mobilenet_v2.model')

image=cv2.imread(r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector\examples\example_01.png/jpg')

image

image.shape


(h,w)

blob=cv2.dnn.blobFromImage(image,1.0,(300,300),(104.0,177.0,123.0))

blob

blob.shape

net.setInput(blob)
detections

#loop over the detections
for i in range(0,detections.shape[2]):
    confidence=detections[0,0,i,2]
    
    if confidence>0.5:
        #we need the X,Y coordinates
        box=detections[0,0,i,3:7]*np.array([w,h,w,h])
        (startX,startY,endX,endY)=box.astype('int')
        
        #ensure the bounding boxes fall within the dimensions of the frame
        (startX,startY)=(max(0,startX), max(0,startY))
        (endX,endY)=(min(w-1,endX), min(h-1,endY))
        
        #extract the fact ROI,convert it from BGR to RGB channel,resize it to 300,300 and preprocess it
        face=image[startY:endY, startX:endX]
        face=cv2.cvtColor(face,cv2.COLOR_BGR2RGB)
        face=cv2.resize(face,(300,300))
        
        
        (mask,withoutMask)=model.predict(face)[0]
        
        #determine the class label and color we will use to form the bounding box and text
        label='With Mask' if mask>withoutMask else 'Without Mask'
        color=(0,255,0) if label==' With Mask ' else (0,0,255)
        
        #include the probability in the label
        label="{}:{:.2f}%".format(label,max(mask,withoutMask)*100)
        
        #display the label and bounding boxes
        cv2.putText(image,label,(startX,startY-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,color,2)
        cv2.rectangle(image,(startX,startY),(endX,endY),color,2)
        
        
    cv2.imshow("Output",image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
