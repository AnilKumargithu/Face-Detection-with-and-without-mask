import numpy as np
import os
import matplotlib.pyplot as plt
from imutils import paths

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from sklearn.metrics import classification_report

dataset=r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector\dataset/'
imagePaths=list(paths.list_images(dataset))

imagePaths

data=[]
labels=[]

for i in imagePaths:
    label=i.split(os.path.sep)[-2]
    labels.append(label)
    image=load_img(i,target_size=(300,300))
    image=img_to_array(image)
    image=preprocess_input(image)
    data.append(image)

data

labels

data=np.array(data,dtype='float32')
labels=np.array(labels)

data.shape
labels
lb=LabelBinarizer()
labels=lb.fit_transform(labels)
labels=to_categorical(labels)

labels

train_X,test_X,train_Y,test_Y=train_test_split(data,labels,train_size=0.80,test_size=0.20, random_state=10,stratify=labels)

train_X (or) train_X.shape

train_Y (or) train_Y.shape

test_X (or) test_X.shape

test_Y (or) test_Y.shape

aug=ImageDataGenerator(rotation_range=20,zoom_range=0.15,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.15,horizontal_flip=True,vertical_flip=True,fill_mode='nearest')

baseModel=MobileNetV2(weights='imagenet',include_top=False,input_tensor=Input(shape=(300,300,3)))

baseModel.summary()
 
headModel=baseModel.output
headModel=AveragePooling2D(pool_size=(7,7))(headModel)
headModel=Flatten(name='Flatten')(headModel)
headModel=Dense(128,activation='relu')(headModel)
headModel=Dense(2,activation='softmax')(headModel)

model=Model(inputs=baseModel.input,outputs=headModel)

for layer in baseModel.layers:
    layer.trainable=False

model.summary()

learning_rate=0.001
Epochs=31
BS=19

opt=Adam(learning_rate,decay=learning_rate/Epochs)
model.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])

model.fit(
    aug.flow(train_X,train_Y,batch_size=BS),
    steps_per_epoch=len(train_X)//BS,
    validation_data=(test_X,test_Y),
    validation_steps=len(test_X)//BS,
    epochs=Epochs
)

model.save(r'C:\Users\Anil\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.9\PROJECTS\Face_Mask_Detector\mobilenet_v2.model')

predict=model.predict(test_X,batch_size=BS)
predict=np.argmax(predict,axis=1)
print(classification_report(test_Y.argmax(axis=1),predict,target_names=lb.classes_))
